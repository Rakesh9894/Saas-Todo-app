pipeline {
  agent any

  environment {
    DOCKER_REG = "docker.io"
    AWS_CRED = 'AWS_CRED'
    DOCKER_IMAGE_REPO = "rakesh9894/todo-saas-app"     
    KUBECONFIG_PATH = "/var/lib/jenkins/.kube/config"  // central kubeconfig path
    KUBECONFIG_CRED_ID = 'KUBECONFIG_CRED_ID'             
    DOCKERHUB_CRED = 'DOCKERHUB_CRED'                  
  }

  stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/Rakesh9894/Saas-Todo-app.git', branch: 'main'
      }
    }

    stage('Lint & Test') {
      steps {
        script {
          sh 'node -v || true'
          sh 'npm install || true'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          def GITSHA = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
          env.IMAGE_TAG = "${DOCKER_IMAGE_REPO}:${GITSHA}"
          sh "docker build -t ${env.IMAGE_TAG} ."
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CRED}", usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
          sh 'echo $DH_PASS | docker login -u $DH_USER --password-stdin'
          sh "docker push ${env.IMAGE_TAG}"
        }
      }
    }

    stage('Prepare kubeconfig') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_CRED'],
          file(credentialsId: "${KUBECONFIG_CRED_ID}", variable: 'KUBECONFIG_FILE')
        ]) {
          sh '''
            mkdir -p $(dirname ${KUBECONFIG_PATH})
            cp "${KUBECONFIG_FILE}" ${KUBECONFIG_PATH}
            chmod 600 ${KUBECONFIG_PATH}

            echo "===> Debug IAM identity"
            aws sts get-caller-identity

            echo "===> Updating kubeconfig"
            aws eks update-kubeconfig --name todo-eks --region us-east-1 --kubeconfig ${KUBECONFIG_PATH}
          '''
        }
      }
    }

    stage('Deploy & Monitor') {
      steps {
        withEnv(["KUBECONFIG=${KUBECONFIG_PATH}"]) {
          script {
            // --- Staging ---
            sh """
              sed 's|IMAGE_PLACEHOLDER|${env.IMAGE_TAG}|g' k8s/deployment.yaml | kubectl apply -n staging -f -
              kubectl apply -n staging -f k8s/service.yaml
              kubectl apply -n staging -f k8s/hpa.yml
              kubectl rollout status deploy/todo-deployment -n staging --timeout=120s
            """

            sh """
              kubectl apply -n staging -f k8s/smoke-test-job.yaml
              kubectl wait --for=condition=complete job/todo-smoke-test -n staging --timeout=120s
            """

            // --- Production ---
            sh """
              sed 's|IMAGE_PLACEHOLDER|${env.IMAGE_TAG}|g' k8s/deployment.yaml | kubectl apply -n production -f -
              kubectl apply -n production -f k8s/service.yaml
              kubectl apply -n production -f k8s/hpa.yml
              kubectl rollout status deploy/todo-deployment -n production --timeout=120s
            """

            // --- Monitoring ---
            sh """
              kubectl get ns monitoring || kubectl create ns monitoring

              kubectl apply -n monitoring -f k8s/monitoring/prometheus-deployment.yaml
              kubectl apply -n monitoring -f k8s/monitoring/prometheus-service.yaml
              kubectl apply -n monitoring -f k8s/monitoring/grafana-deployment.yaml
              kubectl apply -n monitoring -f k8s/monitoring/grafana-service.yaml
            """

            // --- Verify ---
            sh """
              echo "===> Monitoring resources"
              kubectl get pods -n monitoring
              kubectl get svc -n monitoring

              echo "===> Production resources"
              kubectl get pods -n production
              kubectl get svc -n production
            """
          }
        }
      }
    }
  }
}
